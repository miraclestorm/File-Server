type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Main {

        public static Boolean addFile(String fileName, List<String> fileArray) {
            Boolean result = true;
            for (int i = 0; i < fileArray.size(); i++) {
                if (fileArray.get(i).equals(fileName)) {
                    result = false;
                    continue;
                }
            }
            if (result == true) {
                fileArray.add(fileName);
            }
            return result;
        }

        public static Boolean getFile(String fileName, List<String> fileArray) {
            Boolean result = false;
            Integer indx = 0;
            for (int i = 0; i < fileArray.size(); i++) {
                if (fileArray.get(i).equals(fileName)) {
                    result = true;
                }
            }
            return result;
        }

        public static Boolean deleteFile(String fileName, List<String> fileArray) {
            Boolean result = false;
            for (int i = 0; i < fileArray.size(); i++) {
                if (fileArray.get(i).equals(fileName)) {
                    result = true;
                    fileArray.remove(i);
                    continue;
                }
            }
            return result;
        }

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            List<String> fileArray = new ArrayList<String>();
            String msg = "";
            String cmdLine = scanner.nextLine();
            String fileName = "";
            String cmd = "exit";

            if (!cmdLine.equals("exit")) {
                Integer i = cmdLine.indexOf(' ');
                fileName = cmdLine.substring(i + 1, cmdLine.length());
                cmd = cmdLine.substring(0, i);

                do
                {
                    if (cmd.equals("add")) {

                        try {
                            Integer fileNumber = Integer.valueOf((fileName.substring(4, fileName.length())));
                            if (fileNumber > 10 | fileNumber < 0) {
                                msg = "Cannot add the file " + fileName;
                            } else {
                                if (addFile(fileName, fileArray) == true) {
                                    msg = "The file " + fileName + " added successfully";
                                } else {
                                    msg = "Cannot add the file " + fileName;
                                }
                            }
                        } catch (Exception e) {
                            msg = "Cannot add the file " + fileName;
                        }
                        System.out.println(msg);
                    } else if (cmd.equals("get")) {
                        if (getFile(fileName, fileArray) == true) {
                            msg = "The file " + fileName + " was sent";
                        } else {
                            msg = "The file " + fileName + " not found";
                        }
                        System.out.println(msg);
                    } else if (cmd.equals("delete")) {
                        if (deleteFile(fileName, fileArray) == true) {
                            msg = "The file " + fileName + " was deleted";
                        } else {
                            msg = "The file " + fileName + " not found";
                        }
                        System.out.println(msg);
                    } else if (!cmd.equals("exit")) {
                        System.out.println("Wrong Command! Try again!");
                    }

                    cmdLine = scanner.nextLine();
                    if (!cmdLine.equals("exit")) {
                        i = cmdLine.indexOf(' ');
                        fileName = cmdLine.substring(i + 1, cmdLine.length());
                        cmd = cmdLine.substring(0, i);
                    } else {
                        cmd = cmdLine;
                    }

                } while (!cmd.equals("exit"));
            }


        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/client/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/284/implement#comment
status: Solved
record: 1
